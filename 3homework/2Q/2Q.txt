[1Q. K번째 수; 새롭게 알게 된 점 & 주의할 점]
- 번째, 인덱스 번호 주의
- 2차원배열 주의[c][]
- Arrays.copyOfRange: 배열 일부를 쉽게 복사할 수 있는 함수

// 정답을 저장할 배열 생성 (commands의 길이만큼)
int[] answer = new int[commands.length];

// 각 명령어(commands)를 하나씩 처리
for (int c = 0; c < commands.length; c++) {
    // 현재 명령어에서 i, j, k 값 추출
    int i = commands[c][0];
    int j = commands[c][1];
    int k = commands[c][2];

    // 배열의 i번째부터 j번째까지 자른 후 (인덱스는 0부터 시작하므로 i-1)
    int[] temp = Arrays.copyOfRange(array, i - 1, j);

    // 자른 배열을 오름차순 정렬
    Arrays.sort(temp);

    // 정렬된 배열에서 k번째 수를 정답 배열에 저장 (인덱스는 0부터 시작하므로 k-1)
    answer[c] = temp[k - 1];
}


[2Q. kakao메뉴리뉴얼; 새롬게 알게 된 점 & 주의할 점]
- 조합 생성 시 중복 제거를 위해 정렬 필요
- 조합 저장에는 Map<String, Integer>활용
- 정렬된 리스트는 Collections.sort(list)로 오름차순 가능

// 최종 정답을 저장할 리스트 생성
List<String> answerList = new ArrayList<>();

// 코스 요리 개수(course 배열)를 하나씩 처리
for (int c : course) {
    // 조합별 등장 횟수를 저장할 맵 생성
    Map<String, Integer> map = new HashMap<>();

    // 모든 주문(orders)을 하나씩 확인
    for (String order : orders) {
        // 문자열을 문자 배열로 변환 후 정렬 (조합 중복 방지를 위해)
        char[] orderArr = order.toCharArray();
        Arrays.sort(orderArr);

        // 조합 생성 함수 호출 (재귀 사용)
        genrateCombination(orderArr, 0, c, "", map);
    }

    // 현재 코스 길이에서 가장 많이 등장한 조합 찾기
    int max = 0;
    for (int count : map.values()) {
        if (count > max) max = count;
    }

    // 2번 이상 등장한 조합만 정답 후보로 간주
    if (max < 2) continue;

    // 가장 많이 등장한 조합들을 정답 리스트에 추가
    for (String key : map.keySet()) {
        if (map.get(key) == max) {
            answerList.add(key);
        }
    }
}

// 정답 리스트를 오름차순 정렬
Collections.sort(answerList);

// 리스트를 문자열 배열로 변환하여 반환
return answerList.toArray(new String[0]);

// 조합 생성 함수 (재귀 방식)
// orderArr: 정렬된 주문 문자 배열
// start: 현재 조합 시작 인덱스
// c: 만들고자 하는 조합의 길이
// comb: 현재까지 만들어진 조합 문자열
// map: 조합의 등장 횟수를 저장할 맵
public void genrateCombination(char[] orderArr, int start, int c, String comb, Map<String, Integer> map) {
    // 조합 길이가 목표 길이에 도달하면 map에 저장하고 종료
    if (comb.length() == c) {
        map.put(comb, map.getOrDefault(comb, 0) + 1);
        return;
    }

    // 현재 인덱스부터 끝까지 반복하며 조합 생성
    for (int i = start; i < orderArr.length; i++) {
        // 현재 글자를 조합에 추가하고, 다음 인덱스로 재귀 호출
        genrateCombination(orderArr, i + 1, c, comb + orderArr[i], map);
    }
}


--------------------------------------------------------------
[2Q. kakao 메뉴리뉴얼]
1. 문제 분석
코스 요리 메뉴 최소 2가지 이상의 단품메뉴 조합
손님 2개 이상 A~Z 주문, 가장 많은 조합 
orders[2~20]
orders 배열의 각 원소는 크기가 2 이상 10 이하인 문자열
알파벳 대문자로만, 중복x
course[1~10] ASC 중복x

return 문자열 형식 배열, 사전 순, 오름차순 정렬
많이 주문 메뉴 구성 여러개->모두 배열 담아 return
orders course 매개변수 return 하는 배열의 길이가 1 이상이 되도록
-------------


- 주문 다 확인 [2,3,4] 각 조합 길이 만큼, 
-> 배열(String[])은 길이 고정
-> 코스마다 조합 몇개 찾을지 모르니, 몇 개 넣을 건지 모르니,
list?  

모든 알파벳 다 찾기..?
2--> AB AC AD AE ..?
3--> ABC ACD ADE ...
4--> ABCD ACDE BCED ..?
이 조합들 키,값(정수)이거 사용해서 정수로 해놔야 개수 알 수 있나

많이 주문된 조합 수로 저장 -> 정렬(사전순) -> 결과 배열로 변환

//조합 (3C1)
order = [a,b,c] 목표 길이가 2
a b 
a c 
b c 
[ab, ac, bc]
abcd 0123
01, 02, 03, .. 중복 아닌걸 어떻게 잡지
12, 13, 
23, 아 앞 글자보다 뒤에 있는 애들만 보기
for (i=index; i<order.length; i++){
   앞글자+order[i], i+1, length
}
리턴 값 리스트 받아서 채우기
현재 조합 길이 만족 - 끝내기기
아직 아니면 글자 앞글자+order[i] 다시 돌아가는
==>중복 없이 정해진 길이만큼의 조합
글자 배열에서 정해진 수만큼 뽑아야 함
지금까지 만든 글자 저장 
--------------------------------------------------
- 입력 데이터 확인 
char[] orderArr = order.toCharArray();
Arrays.sort(orderArr);
System.out.println(Arrays.toString(orderArr));


--------------------------------------------------
[gpt]
//조합 어떻게 구조 잡아야할지 모르겠음 -> gpt 도움
- 조합 생성 함수 구현
public void genrateCombination(char[] orderArr, int start, int c, String comb, Map<String, Integer> map) {
    if (comb.length() == c) {
        map.put(comb, map.getOrDefault(comb, 0) + 1);
        return;
    }
    for (int i = start; i < orderArr.length; i++) {
        genrateCombination(orderArr, i + 1, c, comb + orderArr[i], map);
    }
}
--------------------------------------------------

if (max < 2) continue; 빼먹음
-->2번 이상 주문된 조합만을 고려해야 하는 문제 조건을 위반
등장 횟수가 1인 조합도 고려하게 됨 

//for문안에 넣기 
for (String key : map.keySet()) {
    if (map.get(key) == max) {
        answerList.add(key); // 1번만 나온 조합도 들어갈 수 있음
    }
}
//안 넣으면 -> 주문한 사람이 한 명 뿐인 조합도 포함될 수 있음
1번씩만 나온 조합 포함 시키면 안됨
